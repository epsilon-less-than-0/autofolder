

# This file was *autogenerated* from the file testing_non_isomorphic.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_4 = Integer(4); _sage_const_1 = Integer(1); _sage_const_6 = Integer(6); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_5 = Integer(5)
from traintrack import *
from sage.combinat.permutation import Permutations
import copy

from sage.graphs.views import EdgesView
from cusp import cusp
from itertools import product
from sage.combinat.permutation import Permutations
import copy
from check_dict_values_cyclic import *


G = Graph({_sage_const_0 :[_sage_const_0 ,_sage_const_4 ],_sage_const_1 :[_sage_const_1 ,_sage_const_6 ],_sage_const_2 :[_sage_const_2 ,_sage_const_3 ,_sage_const_5 ],_sage_const_3 :[_sage_const_2 ,_sage_const_3 ],_sage_const_4 :[_sage_const_0 ,_sage_const_5 ,_sage_const_6 ],_sage_const_5 :[_sage_const_4 ,_sage_const_6 ,_sage_const_2 ],_sage_const_6 :[_sage_const_1 ,_sage_const_4 ,_sage_const_5 ]})
order = {_sage_const_0 :[(_sage_const_0 ,_sage_const_4 ),(_sage_const_0 ,_sage_const_0 )],_sage_const_1 :[(_sage_const_1 ,_sage_const_6 ),(_sage_const_1 ,_sage_const_1 ),(_sage_const_0 ,_sage_const_1 )],_sage_const_2 :[(_sage_const_2 ,_sage_const_2 ),(_sage_const_2 ,_sage_const_5 ),(_sage_const_2 ,_sage_const_3 )],_sage_const_3 :[(_sage_const_3 ,_sage_const_3 ),(_sage_const_2 ,_sage_const_3 )],_sage_const_4 :[(_sage_const_0 ,_sage_const_4 ),(_sage_const_4 ,_sage_const_5 ),(_sage_const_4 ,_sage_const_6 )],_sage_const_5 :[(_sage_const_4 ,_sage_const_5 ),(_sage_const_2 ,_sage_const_5 ),(_sage_const_5 ,_sage_const_6 )],_sage_const_6 :[(_sage_const_4 ,_sage_const_6 ),(_sage_const_5 ,_sage_const_6 ),(_sage_const_1 ,_sage_const_6 )]}
infpoly = {"marked":[(_sage_const_1 ,[_sage_const_0 ]),(_sage_const_1 ,[_sage_const_1 ]),(_sage_const_1 ,[_sage_const_2 ]),(_sage_const_1 ,[_sage_const_3 ])],"unmarked":[(_sage_const_3 ,[_sage_const_4 ,_sage_const_5 ,_sage_const_6 ])]}
singularity_type = {"marked":[_sage_const_1 ,_sage_const_1 ,_sage_const_1 ,_sage_const_1 ],"unmarked":[_sage_const_3 ],"boundary":[_sage_const_1 ]}
c = cusp(_sage_const_2 ,((_sage_const_2 ,_sage_const_3 ),(_sage_const_2 ,_sage_const_5 )))
cusps = [c]


G_alt = Graph({_sage_const_0 :[_sage_const_0 ,_sage_const_1 ],_sage_const_1 :[_sage_const_0 ,_sage_const_1 ,_sage_const_4 ],_sage_const_2 :[_sage_const_2 ,_sage_const_6 ],_sage_const_3 :[_sage_const_3 ,_sage_const_5 ],_sage_const_4 :[_sage_const_1 ,_sage_const_6 ,_sage_const_5 ],_sage_const_5 :[_sage_const_4 ,_sage_const_6 ,_sage_const_3 ],_sage_const_6 :[_sage_const_2 ,_sage_const_4 ,_sage_const_5 ]})
order_alt = {_sage_const_0 :[(_sage_const_0 ,_sage_const_1 ),(_sage_const_0 ,_sage_const_0 )],_sage_const_1 :[(_sage_const_1 ,_sage_const_4 ),(_sage_const_1 ,_sage_const_1 ),(_sage_const_0 ,_sage_const_1 )],_sage_const_2 :[(_sage_const_2 ,_sage_const_2 ),(_sage_const_2 ,_sage_const_6 )],_sage_const_3 :[(_sage_const_3 ,_sage_const_3 ),(_sage_const_3 ,_sage_const_5 )],_sage_const_4 :[(_sage_const_1 ,_sage_const_4 ),(_sage_const_4 ,_sage_const_5 ),(_sage_const_4 ,_sage_const_6 )],_sage_const_5 :[(_sage_const_4 ,_sage_const_5 ),(_sage_const_3 ,_sage_const_5 ),(_sage_const_5 ,_sage_const_6 )],_sage_const_6 :[(_sage_const_4 ,_sage_const_6 ),(_sage_const_5 ,_sage_const_6 ),(_sage_const_2 ,_sage_const_6 )]}
infpoly_alt = {"marked":[(_sage_const_1 ,[_sage_const_0 ]),(_sage_const_1 ,[_sage_const_1 ]),(_sage_const_1 ,[_sage_const_2 ]),(_sage_const_1 ,[_sage_const_3 ])],"unmarked":[(_sage_const_3 ,[_sage_const_4 ,_sage_const_5 ,_sage_const_6 ])]}
singularity_type_alt = {"marked":[_sage_const_1 ,_sage_const_1 ,_sage_const_1 ,_sage_const_1 ],"unmarked":[_sage_const_3 ],"boundary":[_sage_const_1 ]}
c_alt = cusp(_sage_const_1 ,((_sage_const_1 ,_sage_const_4 ),(_sage_const_0 ,_sage_const_1 )))
cusps_alt = [c_alt]

T = traintrack(G,cusps,order,singularity_type,infpoly)
T_copy = traintrack(G_alt,cusps_alt,order_alt,singularity_type_alt,infpoly_alt)

# T_copy.fold(c_copy,1)

print(T.is_isomorphic_to(T_copy))

