

# This file was *autogenerated* from the file testing.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2)
from traintrack import *
from sage.combinat.permutation import Permutations
import copy

from sage.graphs.views import EdgesView
from cusp import cusp
from itertools import product
from sage.combinat.permutation import Permutations
import copy
from check_dict_values_cyclic import *


G = Graph({_sage_const_0 :[_sage_const_0 ,_sage_const_1 ],_sage_const_1 :[_sage_const_0 ,_sage_const_1 ,_sage_const_2 ],_sage_const_2 :[_sage_const_1 ,_sage_const_2 ]})
order = {_sage_const_0 :[(_sage_const_0 ,_sage_const_1 ),(_sage_const_0 ,_sage_const_0 )],_sage_const_1 :[(_sage_const_1 ,_sage_const_2 ),(_sage_const_1 ,_sage_const_1 ),(_sage_const_0 ,_sage_const_1 )],_sage_const_2 :[(_sage_const_2 ,_sage_const_2 ),(_sage_const_1 ,_sage_const_2 )]}
infpoly = {"marked":[(_sage_const_1 ,[_sage_const_0 ]),(_sage_const_1 ,[_sage_const_1 ]),(_sage_const_1 ,[_sage_const_2 ])],"unmarked":[]}
singularity_type = {"marked":[_sage_const_1 ,_sage_const_1 ,_sage_const_1 ],"unmarked":[],"boundary":[_sage_const_1 ]}
c = cusp(_sage_const_1 ,((_sage_const_1 ,_sage_const_2 ),(_sage_const_0 ,_sage_const_1 )))
cusps = [c]


G_copy = Graph({_sage_const_0 :[_sage_const_0 ,_sage_const_1 ],_sage_const_1 :[_sage_const_0 ,_sage_const_1 ,_sage_const_2 ],_sage_const_2 :[_sage_const_1 ,_sage_const_2 ]})
order_copy = {_sage_const_0 :[(_sage_const_0 ,_sage_const_1 ),(_sage_const_0 ,_sage_const_0 )],_sage_const_1 :[(_sage_const_1 ,_sage_const_2 ),(_sage_const_1 ,_sage_const_1 ),(_sage_const_0 ,_sage_const_1 )],_sage_const_2 :[(_sage_const_2 ,_sage_const_2 ),(_sage_const_1 ,_sage_const_2 )]}
infpoly_copy = {"marked":[(_sage_const_1 ,[_sage_const_0 ]),(_sage_const_1 ,[_sage_const_1 ]),(_sage_const_1 ,[_sage_const_2 ])],"unmarked":[]}
singularity_type_copy = {"marked":[_sage_const_1 ,_sage_const_1 ,_sage_const_1 ],"unmarked":[],"boundary":[_sage_const_1 ]}
c_copy = cusp(_sage_const_1 ,((_sage_const_1 ,_sage_const_2 ),(_sage_const_0 ,_sage_const_1 )))
cusps_copy = [c_copy]

T = traintrack(G,cusps,order,singularity_type,infpoly)
T_copy = traintrack(G_copy,cusps_copy,order_copy,singularity_type_copy,infpoly_copy)

T_copy.fold(c_copy,_sage_const_1 )

print(T.is_isomorphic_to(T_copy))


